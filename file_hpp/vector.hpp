//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File:      Vector.h                                                      //
// Project:   miniTri                                                       //   
// Author:    Michael Wolf                                                  //
//                                                                          //
// Description:                                                             //
//              Header file for vector class.                               //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////
#ifndef VECTOR_H
#define VECTOR_H

#include <vector>  // Thêm dòng này d? s? d?ng std::vector
#include <iostream>
//////////////////////////////////////////////////////////////////////////////
// Compressed Sparse Row storage format Matrix
//////////////////////////////////////////////////////////////////////////////
class Vector
{
 private:
  int mNumElements;   //number of elements
  std::vector<int> mElements;  // Thay th? boost::shared_array b?ng std::vector

 public:

  //////////////////////////////////////////////////////////////////////////
  // default constructor -- builds empty matrix
  //////////////////////////////////////////////////////////////////////////
  Vector() 
    :mNumElements(0), mElements()
  {
  };
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // constructor -- allocates memory for CSR sparse matrix
  //////////////////////////////////////////////////////////////////////////
  Vector(int _m, int _bs = 1)
    :mNumElements(_m), mElements(_m, 0)  // T?o m?t vector v?i _m ph?n t?, giá tr? m?c d?nh là 0
  {
  };
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // Copy constructor -- No data reallocation, just copying of smart pointers
  //////////////////////////////////////////////////////////////////////////
  Vector(const Vector &obj)
    :mNumElements(obj.mNumElements), mElements(obj.mElements)
  {
  };
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // destructor -- deletes matrix
  //////////////////////////////////////////////////////////////////////////
  ~Vector()
  {
  };
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////
  // additional accessors and accessor prototypes
  //////////////////////////////////////////////////////////////////

  // returns the number of rows
  int getSize() const { return mNumElements;};


  //////////////////////////////////////////////////////////////////////////
  // v[i] operator -- accessor for elements in vector
  //////////////////////////////////////////////////////////////////////////
  int operator [](int indx) const
  {
    return mElements[indx];
  }
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////
  void resize(int _m)
  {
    mNumElements = _m;
    mElements.resize(_m, 0);  // Thay d?i kích thu?c và d?t giá tr? m?c d?nh là 0
  }
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // setVal -- function sets element indx to be alpha
  //////////////////////////////////////////////////////////////////////////
  void setVal(int indx, int alpha) 
  {
    mElements[indx] = alpha;
  }
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // setVal -- function sets all elements to be alpha
  //////////////////////////////////////////////////////////////////////////
  void setScalar(int alpha) 
  {
    std::fill(mElements.begin(), mElements.end(), alpha);  // Ð?t t?t c? các ph?n t? b?ng giá tr? alpha
  }
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // Output vector
  //////////////////////////////////////////////////////////////////////////
  void Print() const
  {
    std::cout << "Vector: " << std::endl;
    for (int i = 0; i < mNumElements; i++)
    {
      std::cout << mElements[i] << std::endl;
    }
  }
  //////////////////////////////////////////////////////////////////////////
};

#endif
