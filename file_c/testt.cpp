//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File:      CSRmatrix.h                                                   //
// Project:   miniTri                                                       //
// Author:    Michael Wolf                                                  //
//                                                                          //
// Description:                                                             //
//              Header file for CSR matrix class.                           //
//                                                                          //
//////////////////////////////////////////////////////////////////////////////
#ifndef CSRMATRIX_H
#define CSRMATRIX_H

#include <list>
#include <vector>
#include <map>
#include <memory>
	
	class Vector;
	
	//////////////////////////////////////////////////////////////////////////////
	// Compressed Sparse Row storage format Matrix
	//////////////////////////////////////////////////////////////////////////////
	class CSRMat 
	{
	
	 private:
	 	enum matrixtype { UNDEFINED, LOWERTRI, UPPERTRI, INCIDENCE };
	  matrixtype type;
	  int m;   //number of rows
	  int n;   //number of cols
	  int nnz; //number of nonzeros
	
	  std::vector<int> nnzInRow;                             // nnz in each row
	  std::vector<std::shared_ptr<std::vector<int>>> cols;    // columns of nonzeros
	  std::vector<std::shared_ptr<std::vector<int>>> vals;    // values of nonzeros
	  std::vector<std::shared_ptr<std::vector<int>>> vals2;   // values of nonzeros
	
	 public:
	  //////////////////////////////////////////////////////////////////////////
	  // default constructor -- builds an empty matrix
	  //////////////////////////////////////////////////////////////////////////
	  CSRMat() 
	    :type(UNDEFINED), m(0), n(0), nnz(0), nnzInRow(), cols(), vals(), vals2()
	  {
	  };
	  //////////////////////////////////////////////////////////////////////////
	
	  //////////////////////////////////////////////////////////////////////////
	  // Constructor that accepts matrix type as an argument
	  //////////////////////////////////////////////////////////////////////////
	  CSRMat(matrixtype _type) 
	    :type(_type), m(0), n(0), nnz(0), nnzInRow(), cols(), vals(), vals2()
	  {
	  };
	  //////////////////////////////////////////////////////////////////////////
	
	  //////////////////////////////////////////////////////////////////////////
	  // constructor -- allocates memory for CSR sparse matrix
	  //////////////////////////////////////////////////////////////////////////
	  CSRMat(int _m, int _n, bool allocateVals2 = false)
	    : type(UNDEFINED), m(_m), n(_n),
	      nnzInRow(_m), cols(_m), vals(_m)
	  {
	    if (allocateVals2)
	    {
	      vals2 = std::vector<std::shared_ptr<std::vector<int>>>(m);
	    }
	  };
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // destructor -- deletes the matrix
  //////////////////////////////////////////////////////////////////////////
  ~CSRMat()
  {
  };
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // additional functions and prototypes for additional functions
  // defined in CSRmatrix.cc
  //////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////
  // print -- prints the matrix to stdio
  //////////////////////////////////////////////////////////////////
  void print() const;
  //////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////
  // Sums matrix elements
  //////////////////////////////////////////////////////////////////
  std::list<int> getSumElements() const;
  //////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////
  // additional accessors and accessor prototypes
  //////////////////////////////////////////////////////////////////
  // returns the number of rows
  int getM() const { return m; };

  // returns the number of cols
  int getN() const { return n; };

  // returns the number of cols
  int getNNZ() const { return nnz; };

  // returns NNZ in row rnum
  inline int getNNZInRow(int rnum) const { return nnzInRow[rnum]; };

  // returns column # for nonzero in row rowi at index nzindx
  inline int getCol(int rowi, int nzindx) const { return (*cols[rowi])[nzindx]; };

  // returns value for nonzero at inddex nzindx
  inline int &getVal(int rowi, int nzindx) const
  {
    return (*vals[rowi])[nzindx];
  };
  //////////////////////////////////////////////////////////////////

  void SpMV1(bool trans, Vector &y);

  //////////////////////////////////////////////////////////////////
  // level 3 basic linear algebra subroutines
  //////////////////////////////////////////////////////////////////
  void matmat(const CSRMat &A, const CSRMat &B);
  //////////////////////////////////////////////////////////////////

  void computeKCounts(const Vector &vTriDegrees, const Vector &eTriDegrees,
                      const std::map<int, std::map<int, int>> &edgeInds,
                      std::vector<int> &kCounts);

  void readMMMatrix(const char *fname);
  void readBinMatrix(const char *fname);

  void createTriMatrix(const CSRMat &matrix, matrixtype mtype);
  void createIncidentMatrix(const CSRMat &matrix, std::map<int, std::map<int, int>> &eIndices);

  void permute();

  //////////////////////////////////////////////////////////////////////////

};
//////////////////////////////////////////////////////////////////////////////
#endif
